{"version":3,"sources":["LandingPage/TopNavBar.jsx","resources/surfaceMaps/2k_sun.jpeg","Globes/SunGlobe.jsx","WeatherCard/WeatherCard.jsx","Globes/EarthGlobe.jsx","resources/surfaceMaps/lunar_surface.jpg","resources/surfaceMaps/lunar_bumpmap.jpg","Globes/MoonGlobe.jsx","resources/surfaceMaps/2k_mars.jpeg","Globes/MarsGlobe.jsx","resources/earth_blue_planet_globe.jpg","resources/moon-test.png","resources/sun_immage.jpeg","resources/mars_red_planet_planet.jpg","LandingPage/LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["TopNavBar","Box","sx","flexGrow","AppBar","className","position","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","gData","lat","lng","SunGlobe","globeEl","useRef","useEffect","current","controls","autoRotate","autoRotateSpeed","pointOfView","altitude","ref","globeImageUrl","sunImage","pointsData","pointAltitude","pointColor","height","width","WeatherCard","data","useState","cardData","setCardData","Card","minWidth","CardContent","fontSize","gutterBottom","coord","toPrecision","lon","Collapse","in","weather","orientation","timeout","unmountOnExit","name","main","temp","API_KEY","GRID_SIZE","redMaterial","THREE","opacity","transparent","noMaterial","tileWidth","tileHeight","tilesData","EarthGlobe","tiles","setTiles","previousTile","setPreviousTile","weatherDisplayData","setWeatherDisplayData","setWeatherDataLoading","onClickRegion","selectedTile","locationData","fetch","then","res","json","result","error","bumpImageUrl","tileMaterial","onTileHover","t","map","material","onTileClick","Array","keys","forEach","lngIdx","latIdx","push","MoonGlobe","randomTemp","Math","random","id","description","icon","base","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","clouds","all","dt","sys","type","message","country","sunrise","sunset","timezone","cod","fetchRegionData","console","log","moonImage","moonBumpMap","MarsGlobe","marsImage","LandingPage","activeCard","setActiveCard","openCard","cardChoice","gridNumber","planetCardNumber","Grid","container","spacing","item","xs","md","style","display","PlanetCard","planetName","image","active","earthImage","props","getWindowDimensions","windowDimensions","setWindowDimensions","handleResize","window","addEventListener","removeEventListener","useWindowDimensions","Paper","elevation","maxWidth","CardActionArea","onClick","CardMedia","alt","innerWidth","innerHeight","theme","createTheme","palette","primary","light","dark","secondary","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26693a07.chunk.js","sourcesContent":["import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\n\nexport default function TopNavBar() {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar className=\"AppBar\" position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            wAether\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","export default __webpack_public_path__ + \"static/media/2k_sun.4b569137.jpeg\";","import * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport Globe from 'react-globe.gl';\nimport Typography from '@mui/material/Typography';\n\nimport sunImage from '../resources/surfaceMaps/2k_sun.jpeg'\n\nimport './Globes.css' \n\nconst gData = [{lat:90,lng:135,size:1,color:'white'}]\n\nexport default function SunGlobe() {\n  const globeEl = useRef();\n  \n  useEffect(() => {\n    // Auto-rotate\n    globeEl.current.controls().autoRotate = true;\n    globeEl.current.controls().autoRotateSpeed = 0.3;\n    globeEl.current.pointOfView({ altitude: 4 }, 5000);\n  }, []);\n  return (\n    <div className=\"Globe-container\">\n      <Globe\n      ref={globeEl}\n      globeImageUrl={sunImage}\n      pointsData={gData}\n      pointAltitude=\"size\"\n      pointColor=\"color\"\n      height={800}\n      width={1095}\n    />\n    <div className=\"Globe-no-data-popup\">\n        <Typography variant=\"h5\" component=\"div\" color=\"#FFFFFF\" className=\"Globe-no-data-popup-text\">\n          No Data\n        </Typography>\n      </div>\n    </div>\n  );\n}","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { Collapse } from '@mui/material';\n\nexport default function WeatherCard({ data }) {\n  const [cardData, setCardData] = useState(data);\n  useEffect(() => {\n    setCardData(data);\n  }, [data]);\n  return (\n    <Card sx={{ minWidth: 275 }} className=\"\">\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"#FFFFFF\" gutterBottom>\n          {cardData?.coord?.lat?.toPrecision(4)},{cardData?.coord?.lon?.toPrecision(4)}\n        </Typography>\n        \n          <Collapse in={cardData?.weather} orientation='vertical' timeout=\"auto\" unmountOnExit>\n            <Typography sx={{ fontSize: 14 }} color=\"#FFFFFF\" gutterBottom>\n              {cardData?.name || 'Uninhabited Land'}\n            </Typography>\n            <Typography variant=\"h5\" component=\"div\" color=\"#FFFFFF\">\n              {data?.weather ? data?.weather[0]?.main : null}\n            </Typography>\n            <Typography variant=\"h3\" color=\"#FFFFFF\">\n              {data?.main?.temp?.toPrecision(3) + '°F'}\n            </Typography>\n            <Typography variant=\"h5\" color=\"#FFFFFF\">\n\n            </Typography>\n          </Collapse>\n        \n      </CardContent>\n\n    </Card>\n  );\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport Globe from 'react-globe.gl';\nimport * as THREE from 'three'\n\nimport WeatherCard from '../WeatherCard/WeatherCard'\n\nimport './Globes.css' \n\nconst TILE_MARGIN = 0.00; // degrees\nconst API_KEY = 'beb7150490945ad8e8581ddc73e6a064';\n\n// Gen random data\nconst GRID_SIZE = [20, 10];\n\nconst redMaterial = new THREE.MeshLambertMaterial({ color:'red', opacity: 0.5, transparent: true });\nconst noMaterial = new THREE.MeshLambertMaterial({ color:'red', opacity: 0.0, transparent: true });\n\nconst tileWidth = 360 / GRID_SIZE[0];\nconst tileHeight = 180 / GRID_SIZE[1];\nconst tilesData = [];\n[...Array(GRID_SIZE[0]).keys()].forEach(lngIdx =>\n  [...Array(GRID_SIZE[1]).keys()].forEach(latIdx =>\n    tilesData.push({\n      lng: -180 + lngIdx * tileWidth,\n      lat: -90 + (latIdx + 0.5) * tileHeight,\n      material: '#555555'\n    })\n  )\n);\n\nexport default function EarthGlobe() {\n  const [tiles, setTiles] = useState(tilesData);\n  const [previousTile, setPreviousTile] = useState();\n  const [weatherDisplayData, setWeatherDisplayData] = useState({\n    coord: {\n      lon: -122.08,\n      lat: 37.39\n    },\n  });\n  const [weatherDataLoading, setWeatherDataLoading] = useState(false);\n\n  function onHoverRegion(selectedTile) {\n    if (selectedTile) {\n      if((previousTile?.lat !== selectedTile?.lat || previousTile?.lng !== selectedTile?.lng)){\n        setTiles(tiles.map(t => {\n          if(t?.lat === selectedTile.lat && t?.lng === selectedTile.lng ) {\n            return {...t,material: redMaterial};\n          }\n          if(t?.lat === previousTile?.lat && t?.lng === previousTile?.lng ) {\n            return {...t,material: noMaterial};\n          }\n          return t;\n        }));\n        setPreviousTile(selectedTile);\n        setWeatherDisplayData({...weatherDisplayData,coord:{lat:selectedTile.lat,lon:selectedTile.lng}});\n      }\n    }\n  }\n\n  function onClickRegion(selectedTile) {\n    if (selectedTile) {\n      setWeatherDataLoading(true);\n      fetchRegionData({lat:selectedTile.lat,lng:selectedTile.lng});\n    }\n  }\n\n  function fetchRegionData(locationData) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${locationData.lat}&lon=${locationData.lng}&appid=${API_KEY}&units=imperial `)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setWeatherDisplayData(result);\n          setWeatherDataLoading(false);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n        }\n      );\n    return ({\n      lat:locationData.lat,\n      lng:locationData.lng,\n\n    });\n  }\n\n  let gData = [{lat:90,lng:135,size:1,color:'white'}];\n  return (\n    <div className=\"Globe-container\">\n      <Globe\n      globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-blue-marble.jpg\"\n      bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\n      pointsData={gData}\n      pointAltitude=\"size\"\n      pointColor=\"color\"\n      height={800}\n      width={1095}\n      tileMaterial=\"material\"\n      tilesData={tiles}\n      tileWidth={tileWidth - TILE_MARGIN}\n      tileHeight={tileHeight - TILE_MARGIN}\n      onTileHover={(t) => onHoverRegion(t)}\n      onTileClick={(t) => onClickRegion(t)}\n    >\n    </Globe>\n    <div className=\"Globe-weather-popup\">\n      <WeatherCard data={weatherDisplayData}/>\n    </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/lunar_surface.ae7aaee2.jpg\";","export default __webpack_public_path__ + \"static/media/lunar_bumpmap.1dd7bdd6.jpg\";","import * as React from 'react';\nimport { useState } from 'react';\nimport Globe from 'react-globe.gl';\nimport * as THREE from 'three'\n\nimport WeatherCard from '../WeatherCard/WeatherCard'\n\nimport moonImage from '../resources/surfaceMaps/lunar_surface.jpg'\nimport moonBumpMap from '../resources/surfaceMaps/lunar_bumpmap.jpg'\n\nimport './Globes.css'\n\nconst TILE_MARGIN = 0.00; // degrees\nconst API_KEY = 'beb7150490945ad8e8581ddc73e6a064';\n\n// Gen random data\nconst GRID_SIZE = [20, 10];\n\nconst redMaterial = new THREE.MeshLambertMaterial({ color:'red', opacity: 0.5, transparent: true });\nconst noMaterial = new THREE.MeshLambertMaterial({ color:'red', opacity: 0.0, transparent: true });\n\nconst tileWidth = 360 / GRID_SIZE[0];\nconst tileHeight = 180 / GRID_SIZE[1];\nconst tilesData = [];\n[...Array(GRID_SIZE[0]).keys()].forEach(lngIdx =>\n  [...Array(GRID_SIZE[1]).keys()].forEach(latIdx =>\n    tilesData.push({\n      lng: -180 + lngIdx * tileWidth,\n      lat: -90 + (latIdx + 0.5) * tileHeight,\n      material: '#555555'\n    })\n  )\n);\n\nexport default function MoonGlobe() {\n  const [tiles, setTiles] = useState(tilesData);\n  const [previousTile, setPreviousTile] = useState();\n  const [weatherDisplayData, setWeatherDisplayData] = useState({\n    coord: {\n      lon: -122.08,\n      lat: 37.39\n    },\n  });\n  const [weatherDataLoading, setWeatherDataLoading] = useState(false);\n\n  function onHoverRegion(selectedTile) {\n    if (selectedTile) {\n      if((previousTile?.lat !== selectedTile?.lat || previousTile?.lng !== selectedTile?.lng)){\n        setTiles(tiles.map(t => {\n          if(t?.lat === selectedTile.lat && t?.lng === selectedTile.lng ) {\n            return {...t,material: redMaterial};\n          }\n          if(t?.lat === previousTile?.lat && t?.lng === previousTile?.lng ) {\n            return {...t,material: noMaterial};\n          }\n          return t;\n        }));\n        setPreviousTile(selectedTile);\n        setWeatherDisplayData({...weatherDisplayData,coord:{lat:selectedTile.lat,lon:selectedTile.lng}});\n      }\n    }\n  }\n\n  function onClickRegion(selectedTile) {\n    if (selectedTile) {\n      setWeatherDataLoading(true);\n      fetchRegionData({lat:selectedTile.lat,lng:selectedTile.lng});\n      console.log(weatherDisplayData);\n    }\n  }\n\n  function fetchRegionData(locationData) {\n    const randomTemp = 224+(Math.random()-.5)*15;\n    setWeatherDisplayData({\n      coord: {\n        lat:locationData.lat,\n        lon:locationData.lng\n      },\n      weather: [\n        {\n          id: 800,\n          main: \"Clear\",\n          description: \"No Atmosphere\",\n          icon: \"01d\"\n        }\n      ],\n      base: \"stations\",\n      main: {\n        temp: randomTemp,\n        feels_like: randomTemp+Math.random()*4,\n        temp_min: randomTemp-Math.random()*8,\n        temp_max: randomTemp+Math.random()*8,\n        pressure: 0,\n        humidity: 0\n      },\n      visibility: 9999,\n      wind: {\n        speed: 0,\n        deg: 0\n      },\n      clouds: {\n        all: 0\n      },\n      dt: 1560350645,\n      sys: {\n        type: 1,\n        id: 5122,\n        message: 0.0139,\n        country: \"N/A\",\n        sunrise: 1560343627,\n        sunset: 1560396563\n      },\n      timezone: 0,\n      id: 0,\n      name: \"Lunar Surface\",\n      cod: 200\n    });\n    return ({\n      lat:locationData.lat,\n      lng:locationData.lng,\n    });\n  }\n\n  return (\n    <div className=\"Globe-container\">\n      <Globe\n      globeImageUrl={moonImage}\n      bumpImageUrl={moonBumpMap}\n      height={800}\n      width={1095}\n      tileMaterial=\"material\"\n      tilesData={tiles}\n      tileWidth={tileWidth - TILE_MARGIN}\n      tileHeight={tileHeight - TILE_MARGIN}\n      onTileHover={(t) => onHoverRegion(t)}\n      onTileClick={(t) => onClickRegion(t)}\n    />\n    <div className=\"Globe-weather-popup\">\n      <WeatherCard data={weatherDisplayData}/>\n    </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/2k_mars.33960f5a.jpeg\";","import * as React from 'react';\nimport { useEffect, useRef } from 'react';\nimport Globe from 'react-globe.gl';\nimport Typography from '@mui/material/Typography';\n\nimport marsImage from '../resources/surfaceMaps/2k_mars.jpeg'\n\nimport './Globes.css' \n\nconst gData = [{lat:90,lng:135,size:1,color:'white'}]\n\nexport default function MarsGlobe() {\n  const globeEl = useRef();\n  \n  useEffect(() => {\n    // Auto-rotate\n    globeEl.current.controls().autoRotate = true;\n    globeEl.current.controls().autoRotateSpeed = 0.3;\n    globeEl.current.pointOfView({ altitude: 4 }, 5000);\n  }, []);\n  return (\n    <div className=\"Globe-container\">\n      <Globe\n        ref={globeEl}\n        globeImageUrl={marsImage}\n        pointsData={gData}\n        pointAltitude=\"size\"\n        pointColor=\"color\"\n        height={800}\n        width={1095}\n      />\n      <div className=\"Globe-no-data-popup\">\n        <Typography variant=\"h5\" component=\"div\" color=\"#FFFFFF\" className=\"Globe-no-data-popup-text\">\n          No Data\n        </Typography>\n      </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/earth_blue_planet_globe.e614f141.jpg\";","export default __webpack_public_path__ + \"static/media/moon-test.016dc771.png\";","export default __webpack_public_path__ + \"static/media/sun_immage.c75c5e4f.jpeg\";","export default __webpack_public_path__ + \"static/media/mars_red_planet_planet.6956646c.jpg\";","import { useState, useEffect } from 'react';\nimport * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { CardActionArea } from '@mui/material';\nimport { Collapse } from '@mui/material';\n\nimport TopNavBar from \"./TopNavBar\";\nimport SunGlobe from \"../Globes/SunGlobe\"\nimport EarthGlobe from \"../Globes/EarthGlobe\";\nimport MoonGlobe from \"../Globes/MoonGlobe\";\nimport MarsGlobe from \"../Globes/MarsGlobe\";\nimport earthImage from '../resources/earth_blue_planet_globe.jpg';\nimport moonImage from '../resources/moon-test.png';\nimport sunImage from '../resources/sun_immage.jpeg';\nimport marsImage from '../resources/mars_red_planet_planet.jpg'\n\nimport './LandingPage.css'\n\nexport default function LandingPage() {\n  const [activeCard, setActiveCard] = useState(-1);\n  function openCard(cardChoice) {\n    if (cardChoice === activeCard) {\n      setActiveCard(-1);\n      return;\n    }\n    setActiveCard(cardChoice);\n  }\n  function gridNumber(planetCardNumber) {\n    if (activeCard === -1)\n      return 3;\n    if (activeCard === planetCardNumber)\n      return 9;\n    return 1;\n  }\n  return (\n    <div className=\"App\">\n      <TopNavBar />\n      <Grid className=\"CardStack\" container spacing={0}>\n        <Grid item xs={6} md={gridNumber(0)} style={{display:'flex'}}>\n          <PlanetCard planetName=\"Sun\" image={sunImage} openCard={()=>openCard(0)} active={activeCard===0}/>\n          <Collapse in={activeCard===0} orientation='horizontal' timeout=\"auto\" unmountOnExit>\n            <SunGlobe />\n          </Collapse>\n        </Grid>\n        <Grid item xs={6} md={gridNumber(1)} style={{display:'flex'}}>\n          <PlanetCard planetName=\"Earth\" image={earthImage} openCard={()=>openCard(1)} active={activeCard===1}/>\n          <Collapse in={activeCard===1} orientation='horizontal' timeout=\"auto\" unmountOnExit>\n            <EarthGlobe />\n          </Collapse>\n        </Grid>\n        <Grid item xs={6} md={gridNumber(2)} style={{display:'flex'}}>\n          <PlanetCard planetName=\"Moon\" image={moonImage} openCard={()=>openCard(2)} active={activeCard===2}/>\n          <Collapse in={activeCard===2} orientation='horizontal' timeout=\"auto\" unmountOnExit>\n            <MoonGlobe />\n          </Collapse>\n        </Grid>\n        <Grid item xs={6} md={gridNumber(3)} style={{display:'flex'}}>\n          <PlanetCard planetName=\"Mars\" image={marsImage} openCard={()=>openCard(3)} active={activeCard===3}/>\n          <Collapse in={activeCard===3} orientation='horizontal' timeout=\"auto\" unmountOnExit>\n            <MarsGlobe />\n          </Collapse>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction PlanetCard(props) {\n  const { height } = useWindowDimensions();\n  return (\n    <>\n    <Paper elevation={6}>\n      <Card sx={{ maxWidth: props.active ? 90 : 440 }} className=\"PlanetCard\">\n        <CardActionArea onClick={props.openCard}>\n          <CardMedia\n            component=\"img\"\n            height={height-155}\n            image={props.image}\n            alt={`${props.planetName} Image Failed to Load`}\n          />\n          <CardContent className=\"PlanetCard-card-content\">\n            <Typography gutterBottom variant=\"h5\" component=\"div\" className=\"PlanetCard-card-content\">\n              {props.planetName}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        \n      </Card>\n    </Paper>\n    </>\n  );\n};\n\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import './App.css';\nimport LandingPage from './LandingPage/LandingPage';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#4D4D4D',\n      main: '#4D4D4D',\n      dark: '#4D4D4D'\n    },\n    secondary: {\n      light: '#4D4D4D',\n      main: '#4D4D4D',\n      dark: '#4D4D4D'\n    },\n    \n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <LandingPage />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}